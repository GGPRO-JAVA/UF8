import{_ as i,c as s,o as a,a4 as r}from"./chunks/framework.DIQKRKrM.js";const u=JSON.parse('{"title":"Objectius","description":"","frontmatter":{},"headers":[],"relativePath":"objectius.md","filePath":"objectius.md"}'),t={name:"objectius.md"};function l(c,e,o,n,d,p){return a(),s("div",null,e[0]||(e[0]=[r('<h1 id="objectius" tabindex="-1">Objectius <a class="header-anchor" href="#objectius" aria-label="Permalink to &quot;Objectius&quot;">​</a></h1><ul><li>Entendre com es relacionen entre si diferents classes mitjançant associacions (agregació i composició)</li><li>Distingir agregació (relació &quot;té&quot; amb independència d&#39;existència) i composició (relació &quot;està compost per&quot; amb dependència total)</li><li>Aprendre el concepte d&#39;herència: definir subclasses que estenen una superclasse i heretin els seus atributs i mètodes</li><li>Saber usar la paraula clau extends per crear classes derivades i implementar constructors amb super()</li><li>Conèixer com sobreescriure mètodes de la superclasse i invocar l&#39;original amb super.mètode()</li><li>Aplicar els modificadors public, protected i private per controlar la visibilitat en classes i subclasses</li><li>Reconèixer l&#39;ús de final per impedir l&#39;herència de classes i la sobreescriptura de mètodes</li><li>Comprendre el polimorfisme en temps d&#39;execució: cridar mètodes sobreescrits segons el tipus real de l&#39;objecte</li><li>Saber què són les classes abstractes i mètodes abstractes, i com obligar les subclasses a implementar-los</li><li>Identificar les interfícies (interface), la seva sintaxi i com les classes les implementen amb implements</li><li>Valorar el paper d&#39;interfícies i classes abstractes per separar especificació (què fa) de implementació (com ho fa)</li></ul>',2)]))}const b=i(t,[["render",l]]);export{u as __pageData,b as default};
