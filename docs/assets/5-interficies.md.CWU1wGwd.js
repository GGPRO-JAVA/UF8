import{_ as i,c as a,o as s,a0 as t}from"./chunks/framework.CpfCQ-4g.js";const n="/UF8/uf8/Crear_interficie.jpg",r="/UF8/uf8/esquema_exemple6.jpg",l="/UF8/uf8/figura.jpg",p="/UF8/uf8/exemple6.jpg",c="/UF8/uf8/Exemple6_main.jpg",o="/UF8/uf8/eixida_exemple6.jpg",_=JSON.parse('{"title":"5. Interfícies","description":"","frontmatter":{},"headers":[],"relativePath":"5-interficies.md","filePath":"5-interficies.md"}'),d={name:"5-interficies.md"};function m(u,e,f,h,g,k){return s(),a("div",null,e[0]||(e[0]=[t(`<h1 id="_5-interficies" tabindex="-1">5. Interfícies <a class="header-anchor" href="#_5-interficies" aria-label="Permalink to &quot;5. Interfícies&quot;">​</a></h1><p>Una interfície és una <strong>declaració d&#39;atributs i mètodes sense implementació</strong> (sense definir el codi dels mètodes). S&#39;utilitzen per a definir el conjunt mínim d&#39;atributs i mètodes de les classes que implementen aquesta interfície. En certa manera, és paregut a una classe abstracta amb tots els seus membres abstractes.</p><p>Si una classe és una plantilla per a crear objectes, <strong>una interfície és una plantilla per a crear classes</strong>.</p><div class="important custom-block github-alert"><p class="custom-block-title"><strong>IMPORTANT!</strong></p><p>Una interfície és una declaració d&#39;atributs i mètodes sense implementació.</p></div><p>Mitjançant la construcció d&#39;una interfície, el o la programadora pretén especificar què caracteritza a una col·lecció d&#39;objectes i, igualment, especificar quin comportament han de reunir els objectes que vulguen entrar dins d’eixa categoria o col·lecció.</p><p>En una interfície també es poden declarar constants que defineixen el comportament que han de suportar els objectes que vulguen implementar aqueixa interfície. La sintaxi típica d&#39;una interfície és la següent:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Nom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //Declaració d&#39;atributs i mètodes (sense definir codi)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Si una interfície defineix un tipus però aquest tipus no proveeix cap mètode, podem preguntar-nos: <i>per a què serveixen llavors les interfícies a Java?</i><br> La implementació (herència) d&#39;una interfície no podem dir que evite la duplicitat de codi o que afavorisca la reutilització de codi perquè realment no proveeixen codi.</p><p>En canvi, sí que podem dir que reuneix els altres dos avantatges de l&#39;herència: <strong>afavorir el manteniment i l&#39;extensió de les aplicacions.</strong> Per què? <strong>Perquè, en definir interfícies, permetem l&#39;existència de variables polimòrfiques i la invocació polimòrfica de mètodes</strong>.</p><p>Un aspecte fonamental de les interfícies a Java és <strong>separar l&#39;especificació d&#39;una classe (què fa) de la implementació (com ho fa)</strong>. Això s&#39;ha comprovat que dona lloc a programes més robustos i amb menys errors.</p><p>És important tindre en compte que:</p><ul><li>Una interfície no es pot instanciar en objectes, només serveix per a implementar classes.</li><li>Una classe pot implementar diverses interfícies** (separades per comes).</li><li>Una classe que implementa una interfície ha de proporcionar implementació per a tots i cadascun dels mètodes definits en la interfície.</li><li>Les classes que implementen una interfície que té definides constants poden usar-les en qualsevol part del codi de la classe, simplement indicant el seu nom.</li></ul><p>Si per exemple la classe <i>Cercle</i> implementa la interfície <i>Figura</i> la sintaxi seria:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cercle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Figura</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_5-1-exemple-6" tabindex="-1">5.1 Exemple 6 <a class="header-anchor" href="#_5-1-exemple-6" aria-label="Permalink to &quot;5.1 Exemple 6&quot;">​</a></h2><p>En aquest exemple crearem una interfície Figura i posteriorment la implementarem en vàries classes. Per a crear una interfície hem de punxar amb el botó dret sobre el paquet on la vulguem crear i després NEW &gt; Java Interface.</p><p><img src="`+n+'" alt="Crear interfície"></p><p>Veurem un exemple simple de definició i ús de interfície a Java. Les classes que usarem i les seues relacions es mostren en l&#39;esquema:</p><p><img src="'+r+'" alt="Esquema exemple 6"></p><p><img src="'+l+'" alt="Classe Figura"></p><p><img src="'+p+'" alt="Exemple6"></p><p><img src="'+c+'" alt="Exemple6 Main"></p><p>El resultat d&#39;execució podria ser una cosa així:</p><p><img src="'+o+'" alt="Eixida exemple 6"></p><p>En aquest exemple <strong>la interfície Figura defineix un tipus de dada</strong>. Per això podem crear un ArrayList de figures on inserim quadrats, cercles, rectangles, etc. (polimorfisme).</p><p>Això ens permet donar-li un tractament comú a totes les figures: Mitjançant un bucle while recorrem la llista de figures i cridem al mètode area() que serà diferent per a cada classe de figura.</p>',26)]))}const b=i(d,[["render",m]]);export{_ as __pageData,b as default};
